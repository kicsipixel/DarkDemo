//
//  DarkDemo.swift
//  DarkDemo
//
//  Created by Szabolcs Toth on 11/14/18.
//  Copyright Â© 2018 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import Cocoa

public class DarkDemo : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfLight: NSImage?
        static var imageOfDark: NSImage?
    }

    //// Drawing Methods

    @objc dynamic public class func drawLight(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)


        //// Color Declarations
        let strokeColor2 = NSColor(red: 0.102, green: 0.102, blue: 0.118, alpha: 1)

        //// Light.svg Group
        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 81.3, y: 152.83))
        bezierPath.line(to: NSPoint(x: 69.9, y: 77.46))
        bezierPath.line(to: NSPoint(x: 67.79, y: 74.84))
        bezierPath.line(to: NSPoint(x: 53.54, y: 81.18))
        bezierPath.line(to: NSPoint(x: 41.2, y: 106.68))
        bezierPath.line(to: NSPoint(x: 62.13, y: 131.34))
        bezierPath.line(to: NSPoint(x: 80.4, y: 152.83))
        bezierPath.line(to: NSPoint(x: 81.3, y: 152.83))
        bezierPath.close()
        strokeColor2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 29.28, y: 131.34))
        bezier2Path.line(to: NSPoint(x: 18.06, y: 116.29))
        bezier2Path.curve(to: NSPoint(x: 17.71, y: 115.37), controlPoint1: NSPoint(x: 17.86, y: 116.02), controlPoint2: NSPoint(x: 17.74, y: 115.7))
        bezier2Path.curve(to: NSPoint(x: 17.89, y: 114.41), controlPoint1: NSPoint(x: 17.68, y: 115.04), controlPoint2: NSPoint(x: 17.74, y: 114.71))
        bezier2Path.curve(to: NSPoint(x: 18.55, y: 113.69), controlPoint1: NSPoint(x: 18.04, y: 114.11), controlPoint2: NSPoint(x: 18.27, y: 113.86))
        bezier2Path.curve(to: NSPoint(x: 19.49, y: 113.42), controlPoint1: NSPoint(x: 18.83, y: 113.51), controlPoint2: NSPoint(x: 19.16, y: 113.42))
        bezier2Path.line(to: NSPoint(x: 37.93, y: 113.42))
        bezier2Path.line(to: NSPoint(x: 29.28, y: 131.34))
        bezier2Path.close()
        strokeColor2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 90.27, y: 91.9))
        bezier3Path.line(to: NSPoint(x: 137.23, y: 115))
        bezier3Path.curve(to: NSPoint(x: 138, y: 115.72), controlPoint1: NSPoint(x: 137.55, y: 115.16), controlPoint2: NSPoint(x: 137.82, y: 115.41))
        bezier3Path.curve(to: NSPoint(x: 138.23, y: 116.75), controlPoint1: NSPoint(x: 138.18, y: 116.04), controlPoint2: NSPoint(x: 138.26, y: 116.4))
        bezier3Path.curve(to: NSPoint(x: 137.81, y: 117.75), controlPoint1: NSPoint(x: 138.2, y: 117.12), controlPoint2: NSPoint(x: 138.05, y: 117.47))
        bezier3Path.curve(to: NSPoint(x: 136.89, y: 118.32), controlPoint1: NSPoint(x: 137.57, y: 118.03), controlPoint2: NSPoint(x: 137.25, y: 118.23))
        bezier3Path.line(to: NSPoint(x: 109.52, y: 126.68))
        bezier3Path.line(to: NSPoint(x: 86.2, y: 97.7))
        bezier3Path.line(to: NSPoint(x: 90.27, y: 91.9))
        bezier3Path.close()
        strokeColor2.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 126.81, y: 152.83))
        bezier4Path.curve(to: NSPoint(x: 127.74, y: 152.54), controlPoint1: NSPoint(x: 127.14, y: 152.82), controlPoint2: NSPoint(x: 127.47, y: 152.72))
        bezier4Path.curve(to: NSPoint(x: 128.38, y: 151.79), controlPoint1: NSPoint(x: 128.02, y: 152.35), controlPoint2: NSPoint(x: 128.24, y: 152.09))
        bezier4Path.curve(to: NSPoint(x: 128.53, y: 150.82), controlPoint1: NSPoint(x: 128.52, y: 151.49), controlPoint2: NSPoint(x: 128.57, y: 151.15))
        bezier4Path.curve(to: NSPoint(x: 128.15, y: 149.92), controlPoint1: NSPoint(x: 128.49, y: 150.49), controlPoint2: NSPoint(x: 128.36, y: 150.18))
        bezier4Path.line(to: NSPoint(x: 86.13, y: 97.68))
        bezier4Path.line(to: NSPoint(x: 69.93, y: 77.46))
        bezier4Path.line(to: NSPoint(x: 81.33, y: 152.83))
        bezier4Path.line(to: NSPoint(x: 126.81, y: 152.83))
        bezier4Path.close()
        strokeColor2.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 29.28, y: 131.34))
        bezier5Path.line(to: NSPoint(x: 62.13, y: 131.34))
        bezier5Path.line(to: NSPoint(x: 41.2, y: 106.68))
        bezier5Path.line(to: NSPoint(x: 29.28, y: 131.34))
        bezier5Path.close()
        strokeColor2.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.miterLimit = 4
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 118.01, y: 52.52))
        bezier6Path.line(to: NSPoint(x: 67.79, y: 74.83))
        bezier6Path.line(to: NSPoint(x: 86.2, y: 97.7))
        bezier6Path.line(to: NSPoint(x: 118.01, y: 52.52))
        bezier6Path.close()
        strokeColor2.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.miterLimit = 4
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 81.3, y: 152.83))
        bezier7Path.line(to: NSPoint(x: 69.9, y: 77.46))
        bezier7Path.line(to: NSPoint(x: 67.79, y: 74.84))
        bezier7Path.line(to: NSPoint(x: 53.54, y: 81.18))
        bezier7Path.line(to: NSPoint(x: 41.2, y: 106.68))
        bezier7Path.line(to: NSPoint(x: 62.13, y: 131.34))
        bezier7Path.line(to: NSPoint(x: 80.4, y: 152.83))
        bezier7Path.line(to: NSPoint(x: 81.3, y: 152.83))
        bezier7Path.close()
        strokeColor2.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.miterLimit = 4
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 105.47, y: 58.38))
        bezier8Path.line(to: NSPoint(x: 105.47, y: 42.96))
        bezier8Path.curve(to: NSPoint(x: 105.79, y: 41.94), controlPoint1: NSPoint(x: 105.47, y: 42.59), controlPoint2: NSPoint(x: 105.59, y: 42.24))
        bezier8Path.curve(to: NSPoint(x: 106.64, y: 41.28), controlPoint1: NSPoint(x: 106, y: 41.64), controlPoint2: NSPoint(x: 106.3, y: 41.41))
        bezier8Path.curve(to: NSPoint(x: 107.71, y: 41.22), controlPoint1: NSPoint(x: 106.98, y: 41.15), controlPoint2: NSPoint(x: 107.35, y: 41.13))
        bezier8Path.curve(to: NSPoint(x: 108.62, y: 41.78), controlPoint1: NSPoint(x: 108.06, y: 41.31), controlPoint2: NSPoint(x: 108.38, y: 41.51))
        bezier8Path.line(to: NSPoint(x: 118, y: 52.5))
        bezier8Path.line(to: NSPoint(x: 105.47, y: 58.38))
        bezier8Path.close()
        strokeColor2.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.miterLimit = 4
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    @objc dynamic public class func drawDark(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 156, height: 195), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = NSGraphicsContext.current!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 156, height: 195), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 156, y: resizedFrame.height / 195)


        //// Color Declarations
        let strokeColor3 = NSColor(red: 1, green: 1, blue: 1, alpha: 1)

        //// Dark.svg Group
        //// Bezier Drawing
        let bezierPath = NSBezierPath()
        bezierPath.move(to: NSPoint(x: 81.3, y: 152.83))
        bezierPath.line(to: NSPoint(x: 69.9, y: 77.46))
        bezierPath.line(to: NSPoint(x: 67.79, y: 74.84))
        bezierPath.line(to: NSPoint(x: 53.54, y: 81.18))
        bezierPath.line(to: NSPoint(x: 41.2, y: 106.68))
        bezierPath.line(to: NSPoint(x: 62.13, y: 131.34))
        bezierPath.line(to: NSPoint(x: 80.4, y: 152.83))
        bezierPath.line(to: NSPoint(x: 81.3, y: 152.83))
        bezierPath.close()
        strokeColor3.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.miterLimit = 4
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = NSBezierPath()
        bezier2Path.move(to: NSPoint(x: 29.28, y: 131.34))
        bezier2Path.line(to: NSPoint(x: 18.06, y: 116.29))
        bezier2Path.curve(to: NSPoint(x: 17.71, y: 115.37), controlPoint1: NSPoint(x: 17.86, y: 116.02), controlPoint2: NSPoint(x: 17.74, y: 115.7))
        bezier2Path.curve(to: NSPoint(x: 17.89, y: 114.41), controlPoint1: NSPoint(x: 17.68, y: 115.04), controlPoint2: NSPoint(x: 17.74, y: 114.71))
        bezier2Path.curve(to: NSPoint(x: 18.55, y: 113.69), controlPoint1: NSPoint(x: 18.04, y: 114.11), controlPoint2: NSPoint(x: 18.27, y: 113.86))
        bezier2Path.curve(to: NSPoint(x: 19.49, y: 113.42), controlPoint1: NSPoint(x: 18.83, y: 113.51), controlPoint2: NSPoint(x: 19.16, y: 113.42))
        bezier2Path.line(to: NSPoint(x: 37.93, y: 113.42))
        bezier2Path.line(to: NSPoint(x: 29.28, y: 131.34))
        bezier2Path.close()
        strokeColor3.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.miterLimit = 4
        bezier2Path.lineCapStyle = .round
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = NSBezierPath()
        bezier3Path.move(to: NSPoint(x: 90.27, y: 91.9))
        bezier3Path.line(to: NSPoint(x: 137.23, y: 115))
        bezier3Path.curve(to: NSPoint(x: 138, y: 115.72), controlPoint1: NSPoint(x: 137.55, y: 115.16), controlPoint2: NSPoint(x: 137.82, y: 115.41))
        bezier3Path.curve(to: NSPoint(x: 138.23, y: 116.75), controlPoint1: NSPoint(x: 138.18, y: 116.04), controlPoint2: NSPoint(x: 138.26, y: 116.4))
        bezier3Path.curve(to: NSPoint(x: 137.81, y: 117.75), controlPoint1: NSPoint(x: 138.2, y: 117.12), controlPoint2: NSPoint(x: 138.05, y: 117.47))
        bezier3Path.curve(to: NSPoint(x: 136.89, y: 118.32), controlPoint1: NSPoint(x: 137.57, y: 118.03), controlPoint2: NSPoint(x: 137.25, y: 118.23))
        bezier3Path.line(to: NSPoint(x: 109.52, y: 126.68))
        bezier3Path.line(to: NSPoint(x: 86.2, y: 97.7))
        bezier3Path.line(to: NSPoint(x: 90.27, y: 91.9))
        bezier3Path.close()
        strokeColor3.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.miterLimit = 4
        bezier3Path.lineCapStyle = .round
        bezier3Path.lineJoinStyle = .round
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = NSBezierPath()
        bezier4Path.move(to: NSPoint(x: 126.81, y: 152.83))
        bezier4Path.curve(to: NSPoint(x: 127.74, y: 152.54), controlPoint1: NSPoint(x: 127.14, y: 152.82), controlPoint2: NSPoint(x: 127.47, y: 152.72))
        bezier4Path.curve(to: NSPoint(x: 128.38, y: 151.79), controlPoint1: NSPoint(x: 128.02, y: 152.35), controlPoint2: NSPoint(x: 128.24, y: 152.09))
        bezier4Path.curve(to: NSPoint(x: 128.53, y: 150.82), controlPoint1: NSPoint(x: 128.52, y: 151.49), controlPoint2: NSPoint(x: 128.57, y: 151.15))
        bezier4Path.curve(to: NSPoint(x: 128.15, y: 149.92), controlPoint1: NSPoint(x: 128.49, y: 150.49), controlPoint2: NSPoint(x: 128.36, y: 150.18))
        bezier4Path.line(to: NSPoint(x: 86.13, y: 97.68))
        bezier4Path.line(to: NSPoint(x: 69.93, y: 77.46))
        bezier4Path.line(to: NSPoint(x: 81.33, y: 152.83))
        bezier4Path.line(to: NSPoint(x: 126.81, y: 152.83))
        bezier4Path.close()
        strokeColor3.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.miterLimit = 4
        bezier4Path.lineCapStyle = .round
        bezier4Path.lineJoinStyle = .round
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        let bezier5Path = NSBezierPath()
        bezier5Path.move(to: NSPoint(x: 29.28, y: 131.34))
        bezier5Path.line(to: NSPoint(x: 62.13, y: 131.34))
        bezier5Path.line(to: NSPoint(x: 41.2, y: 106.68))
        bezier5Path.line(to: NSPoint(x: 29.28, y: 131.34))
        bezier5Path.close()
        strokeColor3.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.miterLimit = 4
        bezier5Path.lineCapStyle = .round
        bezier5Path.lineJoinStyle = .round
        bezier5Path.stroke()


        //// Bezier 6 Drawing
        let bezier6Path = NSBezierPath()
        bezier6Path.move(to: NSPoint(x: 118.01, y: 52.52))
        bezier6Path.line(to: NSPoint(x: 67.79, y: 74.83))
        bezier6Path.line(to: NSPoint(x: 86.2, y: 97.7))
        bezier6Path.line(to: NSPoint(x: 118.01, y: 52.52))
        bezier6Path.close()
        strokeColor3.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.miterLimit = 4
        bezier6Path.lineCapStyle = .round
        bezier6Path.lineJoinStyle = .round
        bezier6Path.stroke()


        //// Bezier 7 Drawing
        let bezier7Path = NSBezierPath()
        bezier7Path.move(to: NSPoint(x: 81.3, y: 152.83))
        bezier7Path.line(to: NSPoint(x: 69.9, y: 77.46))
        bezier7Path.line(to: NSPoint(x: 67.79, y: 74.84))
        bezier7Path.line(to: NSPoint(x: 53.54, y: 81.18))
        bezier7Path.line(to: NSPoint(x: 41.2, y: 106.68))
        bezier7Path.line(to: NSPoint(x: 62.13, y: 131.34))
        bezier7Path.line(to: NSPoint(x: 80.4, y: 152.83))
        bezier7Path.line(to: NSPoint(x: 81.3, y: 152.83))
        bezier7Path.close()
        strokeColor3.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.miterLimit = 4
        bezier7Path.lineCapStyle = .round
        bezier7Path.lineJoinStyle = .round
        bezier7Path.stroke()


        //// Bezier 8 Drawing
        let bezier8Path = NSBezierPath()
        bezier8Path.move(to: NSPoint(x: 105.47, y: 58.38))
        bezier8Path.line(to: NSPoint(x: 105.47, y: 42.96))
        bezier8Path.curve(to: NSPoint(x: 105.79, y: 41.94), controlPoint1: NSPoint(x: 105.47, y: 42.59), controlPoint2: NSPoint(x: 105.59, y: 42.24))
        bezier8Path.curve(to: NSPoint(x: 106.64, y: 41.28), controlPoint1: NSPoint(x: 106, y: 41.64), controlPoint2: NSPoint(x: 106.3, y: 41.41))
        bezier8Path.curve(to: NSPoint(x: 107.71, y: 41.22), controlPoint1: NSPoint(x: 106.98, y: 41.15), controlPoint2: NSPoint(x: 107.35, y: 41.13))
        bezier8Path.curve(to: NSPoint(x: 108.62, y: 41.78), controlPoint1: NSPoint(x: 108.06, y: 41.31), controlPoint2: NSPoint(x: 108.38, y: 41.51))
        bezier8Path.line(to: NSPoint(x: 118, y: 52.5))
        bezier8Path.line(to: NSPoint(x: 105.47, y: 58.38))
        bezier8Path.close()
        strokeColor3.setStroke()
        bezier8Path.lineWidth = 1
        bezier8Path.miterLimit = 4
        bezier8Path.lineCapStyle = .round
        bezier8Path.lineJoinStyle = .round
        bezier8Path.stroke()
        
        NSGraphicsContext.restoreGraphicsState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfLight: NSImage {
        if Cache.imageOfLight != nil {
            return Cache.imageOfLight!
        }

        Cache.imageOfLight = NSImage(size: NSSize(width: 156, height: 195), flipped: false) { _ in 
            DarkDemo.drawLight()

            return true
        }

        return Cache.imageOfLight!
    }

    @objc dynamic public class var imageOfDark: NSImage {
        if Cache.imageOfDark != nil {
            return Cache.imageOfDark!
        }

        Cache.imageOfDark = NSImage(size: NSSize(width: 156, height: 195), flipped: false) { _ in 
            DarkDemo.drawDark()

            return true
        }

        return Cache.imageOfDark!
    }




    @objc(DarkDemoResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
